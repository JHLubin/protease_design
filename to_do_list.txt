To Do
	Update design protocol
		Extend to non-HCV
		"What sorts of sequences had this mutation?"
		Add sequence change classification, compared to cannonical sequences?
		Borrow from Will's script to ditch CST files
		What to do about double-designed peptide results?
		Output which PDB to check for example of mutation
		Add further constraints to keep peptide in b-sheet
			Manasi emphasized stronger importnce of constraint scores
		Add cleaved/uncleaved indicator to sequences in by-mutation output
		Insert blank lines between sets in by-set mutations and condense_fasc

	For curating loops set, use code from Dali for alignment
	Check at each step--look at PDB files to make sure what's being selected makes sense.
	Test Manasi's sequences in pipeline, check for recognition.

New protocol
	Loop hashing, starting with fixed ends
	Need database of protease loops
		serine-like proteases
		check database for loops of length X that match end orientations
	Variable length build option?
	Mike Tyka, splice mover (Fleishman @ Weitzman Institute)
	Will's RMSA?
	Protocol
		centroid
			Randomly pick loop size
			Find suitable loops in database, splice in
		full-atom
			redesign interface with new loop around peptide
			rescore
			accept/reject
		Swap loops until things aren't improving much. Filter?
		If this overly favors long loops, alternative "hot spot" approach:
			Define hot spots and constrain a hot interaction
			Inverse rotamer sampling
			Backbone moved to accommodate the rotamer
			(Need to figure out which mover does this)
	Benchmark
		Recovery of native loops across set
	Thoughts
		Assessment of loop  (and full structure) flexibility, since part of loop role is in determining rigidity of the catalytic site, part in attracting the substrate, and part in positioning it
		XX(for now)Can we share loops across different types of protease, or even with wider PDB?
		Maybe jump peptide away, then insert loop, check about structure change, then put peptide back in --> filter
		Try peptide binding without constraints vs with constraints? Up CST weights?
		Water-mediation?
		Do we want a database of serine protease mutations?
		Assemble a list of experimental methods, compare to Manasi's?
		Funny thing about orientation, see fig 3
		Competitive in vitro test -- multiple discriminble peptides with designed protease, assess cleavage propensity--quantitative comparison

Ideas
	Would be nice if movemap worked with residue selectors
	Would be nice if designing with FlexPepDock didn't require flags and a resfile, had setter for score function
	XX Test full cut/uncut list w/base HCV protease, search for correlation patterns with extracted data. Sort of like Manasi's paper.
		Total score
		ddG
		Interface residue scores
		Interface residue pair-scores
		Scaling by residue mutation propensity?
	XX Getting a sense of cleavage efficiency for known cleaved, vs. different Rosetta scores

Literature to seek
	--Perona & Craik Proteins/Protein Science 1995, 1997
		loops in serine protease fold
	* HTRA protease--has PDZ and protease
		How to model two-domain + substrate in near-attack
	* Compare a-synuclein and tau papers 
	Neurosin or cathepsin expression
	Note, collagenase structures referenced in Perona&Craik

Collect data on
	Assays for specificity determination
	Engineered proteases for altered specificity
		Mutations and efficacy
	Trypsin-like proteases
		Count interactions of a loop with peptide vs with the rest of the protease
		Assess how happy new loop would be in a splice
		Filter out ones that would really lose their original conformation

	From viewed AEPDIR_1
		Back-convert res 56 to Q
		V93 to glutamate when AEPDI<b>R</b>
			Run a few models to see how that goes
		Glutamate --> lysine was good
		D183K was good w/ asp 4 of peptide
		Lysine on prime side doesn't matter

	Review 2-side (prot + pep) deisgns
		How does FastDesign compare with earlier protocol
			Space of mutations, energies, etc.

	Fix up MFPred

	##########################################################################
	Complete

	Scripting
		--Design both protease and peptide
		--Different sampling protocols
			--Original manual loop
			--FastDesign
			XX FlexPepDock
				XX clashes with enzdes constraints
				may mitigate using Will's constraints trick
				for reference: init('-enzdes::cstfile ly104.cst -packing:resfile resfiles/updated_ly104_protease.resfile -run:preserve_header -cst_fa_weight 1.0 -flexPepDocking:receptor_chain A -flexPepDocking:peptide_chain B -flexPepDocking:design_peptide true -lowres_abinitio true')
			XX Backrub
				Doesn't design
			XX Others?
				Nothing seemed better suited than FastDesign
		--Adjust residue selection
			--Ignore prime region of peptide
			--Differential selection based on side chain length?
				--Selectors applied after threading, rather than before
		--What's up with residue scores?
		--Increase decoy count
		--Improve output
			XX Combine current scripts
				Keep decoy generation and analysis separate, otherwise large sets become a problem
			--Change mutations output to make columns match, separate start/end/energy change 
			--Collect residue mutation propensity
			--Add mutation type, group output that way for by-mutation
			--Add energies to by-mutation output
			--Use selectors to see what residues a mutant might interact with
			--Use min instead of average in first mutants analysis
			--Common vs rare vs situational
			--Look at residue type, not just letter
			--Aggregate mutation info across all models vs mutations specific to peptides
			--Connection between mutation and specific residue in peptide sequence?
			--Mutation type

	--Find cannonical (HCV) sequences 
		Didn't find in Manasi'd paper (4?)
		**** Lin, Chao 2006, fig 2C ****
		Focus on 1b, exclude NS3/NS4A site
		Efficiency: NS5A/NS5B > NA4A/NA4B >> 	NS4B/NS5A
					EDVVCC		DEMEEC			DCSTPC
		Others		DS I 						EYPI
					Q							  TV
												   S
		Charge before CS?
		Compare residue types in designed sequences against these
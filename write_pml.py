#!/usr/bin/python
""" 
Generate PyMOL scripts for viewing design_protease models
Intended to be run after condense_fasc.py
Joseph Lubin, 2017
"""
import argparse
from glob import glob
from os.path import basename, join

def parse_args():
	parser = argparse.ArgumentParser()
	parser.add_argument("folder", help="Pick folder to check")
	args = parser.parse_args()
	return args


def get_rel_des_decoys(pep_seq, pdb_list):
	""" Picks out decoys of a specific peptide sequence from a list """
	relaxed = []
	designed = []

	for p in pdb_list:
		if pep_seq in p:
			if 'designed' in p:
				designed.append(p)
			elif 'relaxed' in p:
				relaxed.append(p)

	relaxed.sort()
	designed.sort()
	for n, i in enumerate(relaxed):
		assert i.replace('relax', 'design') == designed[n]

	return relaxed, designed


def get_scoreline(pdb_list, scores):
	""" Pulls scorelines for a set of PDBs out of a larger list """
	scores_lines = []
	for p in pdb_list:
		p_line = [i for i in scores if basename(p) in i]
		assert len(p_line) == 1
		p_line = p_line[0].split()
		scores_lines.append(p_line)

	return scores_lines


def get_mutation_loci_and_results(scores_lines, ind):
	""" 
	Reads through list of scores lines generated by design_protease.py and 
	returns a dict of loci and PDB files with any mutation at that locus and
	a dict with loci with nested dicts of mutations at the locus and PDBs with
	that mutation at that locus. ind is the index of the score lines where the
	mutations section begins.
	"""
	mutation_loci = {}
	mutation_results = {}
	for l in scores_lines:
		for i in range(2, len(l[ind:]), 4):
			if l[ind:][i] not in ['NO', '=""']:
				p = l[0]
				locus = l[ind:][i-2]
				mutation = l[ind:][i-1]
				if locus not in mutation_loci: # new locus
					mutation_loci[locus] = [p]
					mutation_results[locus] = {mutation:[p]}
				else: # repeat locus
					mutation_loci[locus].append(p)
					if mutation not in mutation_results[locus]: 
						# new mutation
						mutation_results[locus][mutation] = [p]
					else:
						# repeat mutation
						mutation_results[locus][mutation].append(p)

	return mutation_loci, mutation_results


def write_pymol(odir, seq, pdbs, scores, loci, mutations):
	""" 
	Writes a PyMOL script to load given relaxed and designed PDB files and 
	format the view nicely for review of mutations.
	"""
	cmds = ['delete all']
	cmds.append('for pdb in ' + str(pdbs) + ': cmd.load(pdb)')
	cmds.append('select relaxed, *relaxed*')
	cmds.append('select designed, *designed*')
	cmds.append('select cat_res, res 72+96+154')
	cmds.append('select des_res, res ' + '+'.join([str(i) for i in loci]))
	cmds.append('select peptide, chain B')
	cmds.append('color green, relaxed')
	cmds.append('color cyan, designed')
	cmds.append('color magenta, cat_res')
	cmds.append('color yellow, peptide and designed')
	cmds.append('color purpleblue, des_res and designed')
	cmds.append('util.cnc')
	cmds.append('hide')
	cmds.append('show cartoon')
	cmds.append('show sticks, cat_res')
	cmds.append('show lines, peptide des_res')
	cmds.append('set line_width, 3')
	cmds.append('hide sticks, name C+N+O')
	cmds.append('hide lines, name C+N+O')
	cmds.append('hide everything, elem H')
	cmds.append('label des_res and designed and n. CA, "(%s, %s)" % (resi, resn)')
	cmds.append('label peptide and designed and n. CA, resn')
	#cmds.append()
	#cmds.append()
	#cmds.append(set seq_view, 1)
	cmds.append('deselect')

	# Adding line breaks
	cmds = [i + '\n' for i in cmds]

	# Writing pml script
	script_name = join(odir, 'view_' + seq + '.pml')
	with open(script_name, 'w') as w:
		w.writelines(cmds)
	print script_name


def main(folder):
	# Collecting decoys
	search_space = join(folder, '*.pdb')
	pdbs = glob(search_space)

	# Getting scores file
	base_name = basename(folder.rstrip('/'))
	report_name = join(folder, base_name + '_combined_reports.fasc')
	with open(report_name, 'r') as r:
		all_scores = r.readlines()
	score_head = all_scores.pop(0)
	head_len = len(score_head.split())

	# Get list of peptide sequences
	sequences = []
	for p in pdbs:
		for i in p.split('_'):
			if 'SMHL' in i:
				if i not in sequences:
					sequences.append(i)

	# Looking at decoys by sequence
	for s in sequences:
		# Getting list of relaxed and designed decoys
		relaxed, designed = get_rel_des_decoys(s, pdbs)

		# Getting list of score lines
		scores_lines = get_scoreline(designed, all_scores)

		# Getting list of mutation loci and decoys with mutations at the locus
		mutation_loci, mutation_results = \
			get_mutation_loci_and_results(scores_lines, head_len)				
		
		# Writing PyMOL script
		set_pdbs = relaxed + designed
		write_pymol(folder, s, set_pdbs, scores_lines, mutation_loci, mutation_results)

if __name__ == '__main__':
	args = parse_args()
	main(args.folder)
